name: Continuous Integration
on: [push, pull_request]

jobs:
  CI:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        fortran-compiler: [gfortran-8, gfortran-9, ifort, nvfortran]
        # I'd like to add gfortran-10 to this list but have version issues with netcdf as below
        rte-kernels: [default, openacc]
    env:
      FC: ${{ matrix.fortran-compiler }}
      # Defaults for gfortran, over-ridden below
      FCFLAGS: "-ffree-line-length-none -m64 -std=f2008 -march=native -fbounds-check -finit-real=nan -DUSE_CBOOL"
      CC: gcc
      NCHOME: /usr
      NFHOME: /usr
    steps:
    - name: Update system packages
      run: |
        sudo apt-get update
    ############################################################################
    #
    # Compilers....
    #
    # Gfortran 10 not available in Github CI stack, so install
    #
    - name: gfortran-10 setup compiler
      if: contains(matrix.fortran-compiler, 'gfortran-10')
      run: |
        sudo apt-get install gfortran-10 gcc-10
        echo "::set-env name=CC::gcc-10"
    #
    # Intel compilers and libraries if needed
    #   https://software.intel.com/content/www/us/en/develop/articles/oneapi-repo-instructions.html#aptpkg
    #
    - name: Intel setup compilers, environment
      if: contains(matrix.fortran-compiler, 'ifort')
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
        sudo apt-get update
        sudo apt-get install intel-oneapi-common-licensing
        sudo apt-get install intel-oneapi-common-vars
        sudo apt-get install intel-oneapi-dev-utilities
        sudo apt-get install intel-oneapi-icc
        sudo apt-get install intel-oneapi-ifort
        echo "::set-env name=FC::ifort"
        echo "::set-env name=CC::icc"
        echo "::set-env name=FCFLAGS::-m64 -g  -traceback -heap-arrays -assume realloc_lhs -extend-source 132 -check bounds,uninit,pointers,stack -stand f08"
    #
    # Nvidia compilers
    #
    - name: Nvidia setup compilers, environment
      env:
        NVCOMPILERS: /opt/nvidia/hpc_sdk
      if: contains(matrix.fortran-compiler, 'nvfortran')
      run: |
        wget -q https://developer.download.nvidia.com/hpc-sdk/nvhpc-20-7_20.7_amd64.deb https://developer.download.nvidia.com/hpc-sdk/nvhpc-2020_20.7_amd64.deb
        sudo apt-get install ./nvhpc-20-7_20.7_amd64.deb ./nvhpc-2020_20.7_amd64.deb
        echo "::set-env name=FC::nvfortran"
        echo "::set-env name=CC::nvc"
        echo "::set-env name=FCFLAGS::-Mallocatable=03 -Mstandard -Mbounds -Mchkptr -Kieee -Mchkstk"
        echo "::add-path::${NVCOMPILERS}/Linux_x86_64/20.7/compilers/bin"
    ############################################################################
    # Netcdf C and Fortran
    #
    # I would love to install libnetcdf-dev 4.7.4 to be compatible with
    #  netcdf-fortran 4.5.3, which then supports gfortran-10.
    # 4.7.4 is in the groovy set of packages: https://packages.ubuntu.com/groovy/libnetcdf-dev
    #    but I don't know how to use it
    # Nor have I been able to figure out how to build it from source
    #
    - name: Install netcdf C library
      run: |
        sudo apt-get install libnetcdf-dev

    # Skipping this for now - netCDF configure doesn't see the HDF libararies
    - name: Upgrade netcdf C library from source
      if: False
      env:
        CPPFLAGS: -I/usr/include
        LDFLAGS: -L/usr/lib
      run: |
        source /opt/intel/oneapi/setvars.sh || true
        ${CC} --version
        echo ${CPPFLAGS}
        git clone https://github.com/Unidata/netcdf-c.git --branch v4.7.4
        cd netcdf-c
        ./configure --prefix=${NCHOME}
        make
        sudo make install

    - name: Build NetCDF Fortran library
      # Unset any Fortran flags
      env:
        FCFLAGS: -fPIC
      run: |
        source /opt/intel/oneapi/setvars.sh || true
        ${FC} --version
        git clone https://github.com/Unidata/netcdf-fortran.git --branch v4.5.1
        cd netcdf-fortran
        ./configure --prefix=${NFHOME}
        make
        sudo make install
    ############################################################################
    # Checks out repository under $GITHUB_WORKSPACE
    - name: Check out code
      uses: actions/checkout@v2

    - name: Make library, examples, tests
      run: |
        export RRTMGP_ROOT=${GITHUB_WORKSPACE}
        export RTE_KERNELS=${{ matrix.rte-kernels }}
        source /opt/intel/oneapi/setvars.sh || true
        cd ${RRTMGP_ROOT}
        ${FC} --version
        make -C build -j 2
        make -C tests -j 1
        make -C examples/all-sky -j 2
        export RRTMGP_BUILD=${RRTMGP_ROOT}/build
        make -C examples/rfmip-clear-sky -j 2

    ############################################################################
    # Set up Python and packages
    #
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Setup conda
      uses: s-weigand/setup-conda@v1
      with:
        python-version: 3.7
    - name: Install python packages
      run: conda install --yes urllib3 netcdf4 xarray dask scipy matplotlib seaborn colorcet
    ############################################################################
    - name: Stage RFMIP files
      run: |
        export RRTMGP_ROOT=${GITHUB_WORKSPACE}
        cd ${RRTMGP_ROOT}/examples/rfmip-clear-sky
        python ./stage_files.py
    - name: Run examples, tests
      run: |
        export RRTMGP_ROOT=${GITHUB_WORKSPACE}
        source /opt/intel/oneapi/setvars.sh || true
        cd ${RRTMGP_ROOT}/examples/rfmip-clear-sky
        python ./run-rfmip-examples.py --block_size 8
        cd  ${RRTMGP_ROOT}/examples/all-sky
        python ./run-allsky-example.py
        cd  ${RRTMGP_ROOT}/tests
        cp ${RRTMGP_ROOT}/examples/rfmip-clear-sky/multiple_input4MIPs_radiation_RFMIP_UColorado-RFMIP-1-2_none.nc test_atmospheres.nc
        ./clear_sky_regression test_atmospheres.nc ${RRTMGP_ROOT}/rrtmgp/data/rrtmgp-data-lw-g256-2018-12-04.nc
        ./clear_sky_regression test_atmospheres.nc ${RRTMGP_ROOT}/rrtmgp/data/rrtmgp-data-sw-g224-2018-12-04.nc
    - name: Comparison
      run: |
        export RRTMGP_ROOT=${GITHUB_WORKSPACE}
        cd ${RRTMGP_ROOT}/examples/rfmip-clear-sky
        python ./compare-to-reference.py --fail=7.e-4
        cd ${RRTMGP_ROOT}/examples/all-sky
        python ./compare-to-reference.py
        cd ${RRTMGP_ROOT}/tests
        python verification.py
    ############################################################################
    - name: Validation plots
      if: contains(matrix.fortran-compiler, 'ifort') && contains(matrix.rte-kernels, 'default')
      run: |
        export RRTMGP_ROOT=${GITHUB_WORKSPACE}
        cd ${RRTMGP_ROOT}/tests
        python validation-plots.py
    - name: Upload plots
      if: contains(matrix.fortran-compiler, 'ifort') && contains(matrix.rte-kernels, 'default')
      uses: actions/upload-artifact@v2
      with:
        name: valdiation-plot
        path: tests/validation-figures.pdf
